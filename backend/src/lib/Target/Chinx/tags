!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABI	ChinxISelLowering.h	/^    const ChinxABIInfo &ABI;$/;"	m	class:llvm::ChinxTargetLowering
ABI	ChinxTargetMachine.h	/^  ChinxABIInfo ABI;$/;"	m	class:llvm::ChinxTargetMachine
ABI	MCTargetDesc/ChinxABIInfo.h	/^  enum class ABI { Unknown, O32, S32 };$/;"	c	class:llvm::ChinxABIInfo
Address	ChinxISelLowering.h	/^      unsigned Address; \/\/ Offset of the stack area used to pass this argument.$/;"	m	struct:llvm::ChinxTargetLowering::ByValArgInfo
ArchEnum	ChinxSubtarget.h	/^  enum ArchEnum {$/;"	g	class:llvm::ChinxSubtarget
ByValArgInfo	ChinxISelLowering.h	/^      ByValArgInfo() : FirstIdx(0), NumRegs(0), Address(0) {}$/;"	f	struct:llvm::ChinxTargetLowering::ByValArgInfo
ByValArgInfo	ChinxISelLowering.h	/^    struct ByValArgInfo {$/;"	s	class:llvm::ChinxTargetLowering
Chinx1	ChinxSubtarget.h	/^    Chinx1, Chinx2, Chinx3, ChinxMax$/;"	e	enum:llvm::ChinxSubtarget::FeatureEnum
Chinx2	ChinxSubtarget.h	/^    Chinx1, Chinx2, Chinx3, ChinxMax$/;"	e	enum:llvm::ChinxSubtarget::FeatureEnum
Chinx3	ChinxSubtarget.h	/^    Chinx1, Chinx2, Chinx3, ChinxMax$/;"	e	enum:llvm::ChinxSubtarget::FeatureEnum
ChinxABIInfo	MCTargetDesc/ChinxABIInfo.h	/^  ChinxABIInfo(ABI ThisABI) : ThisABI(ThisABI) {}$/;"	f	class:llvm::ChinxABIInfo
ChinxABIInfo	MCTargetDesc/ChinxABIInfo.h	/^class ChinxABIInfo {$/;"	c	namespace:llvm
ChinxArchVersion	ChinxSubtarget.h	/^  ArchEnum ChinxArchVersion;$/;"	m	class:llvm::ChinxSubtarget
ChinxDefault	ChinxSubtarget.h	/^    ChinxDefault, ChinxI, ChinxII$/;"	e	enum:llvm::ChinxSubtarget::ArchEnum
ChinxFeatureVersion	ChinxSubtarget.h	/^  FeatureEnum ChinxFeatureVersion;$/;"	m	class:llvm::ChinxSubtarget
ChinxFrameLowering	ChinxFrameLowering.h	/^    explicit ChinxFrameLowering(const ChinxSubtarget &sti, unsigned Alignment)$/;"	f	class:llvm::ChinxFrameLowering
ChinxFrameLowering	ChinxFrameLowering.h	/^class ChinxFrameLowering : public TargetFrameLowering {$/;"	c	namespace:llvm
ChinxFrameLowering	ChinxSEFrameLowering.cpp	/^ChinxSEFrameLowering::ChinxFrameLowering(const ChinxSubtarget &STI)$/;"	f	class:ChinxSEFrameLowering
ChinxFunctionInfo	ChinxMachineFunction.h	/^  ChinxFunctionInfo(MachineFunction &MF)$/;"	f	class:llvm::ChinxFunctionInfo
ChinxFunctionInfo	ChinxMachineFunction.h	/^class ChinxFunctionInfo : public MachineFunctionInfo {$/;"	c	namespace:llvm
ChinxI	ChinxSubtarget.h	/^    ChinxDefault, ChinxI, ChinxII$/;"	e	enum:llvm::ChinxSubtarget::ArchEnum
ChinxII	ChinxSubtarget.h	/^    ChinxDefault, ChinxI, ChinxII$/;"	e	enum:llvm::ChinxSubtarget::ArchEnum
ChinxISD	ChinxISelLowering.h	/^  namespace ChinxISD {$/;"	n	namespace:llvm
ChinxInstrInfo	ChinxInstrInfo.cpp	/^ChinxInstrInfo::ChinxInstrInfo(const ChinxSubtarget &STI)$/;"	f	class:ChinxInstrInfo
ChinxInstrInfo	ChinxInstrInfo.h	/^class ChinxInstrInfo : public ChinxGenInstrInfo {$/;"	c	namespace:llvm
ChinxMax	ChinxSubtarget.h	/^    Chinx1, Chinx2, Chinx3, ChinxMax$/;"	e	enum:llvm::ChinxSubtarget::FeatureEnum
ChinxPassConfig	ChinxTargetMachine.cpp	/^  ChinxPassConfig(ChinxTargetMachine *TM, PassManagerBase &PM)$/;"	f	class:__anon1::ChinxPassConfig
ChinxPassConfig	ChinxTargetMachine.cpp	/^class ChinxPassConfig : public TargetPassConfig {$/;"	c	namespace:__anon1	file:
ChinxRegisterInfo	ChinxRegisterInfo.cpp	/^ChinxRegisterInfo::ChinxRegisterInfo(const ChinxSubtarget &ST) $/;"	f	class:ChinxRegisterInfo
ChinxRegisterInfo	ChinxRegisterInfo.h	/^class ChinxRegisterInfo : public ChinxGenRegisterInfo {$/;"	c	namespace:llvm
ChinxSEFrameLowering	ChinxSEFrameLowering.h	/^class ChinxSEFrameLowering : public ChinxFrameLowering {$/;"	c	namespace:llvm
ChinxSERegisterInfo	ChinxSERegisterInfo.cpp	/^ChinxSERegisterInfo::ChinxSERegisterInfo(const ChinxSubtarget &ST)$/;"	f	class:ChinxSERegisterInfo
ChinxSERegisterInfo	ChinxSERegisterInfo.h	/^class ChinxSERegisterInfo : public ChinxRegisterInfo {$/;"	c	namespace:llvm
ChinxSETargetLowering	ChinxSEISelLowering.cpp	/^ChinxSETargetLowering::ChinxSETargetLowering(const ChinxTargetMachine &TM,$/;"	f	class:ChinxSETargetLowering
ChinxSETargetLowering	ChinxSEISelLowering.h	/^  class ChinxSETargetLowering : public ChinxTargetLowering  {$/;"	c	namespace:llvm
ChinxSubtarget	ChinxSubtarget.cpp	/^ChinxSubtarget::ChinxSubtarget(const Triple &TT, const std::string &CPU,$/;"	f	class:ChinxSubtarget
ChinxSubtarget	ChinxSubtarget.h	/^class ChinxSubtarget : public ChinxGenSubtargetInfo {$/;"	c	namespace:llvm
ChinxTargetLowering	ChinxISelLowering.cpp	/^ChinxTargetLowering::ChinxTargetLowering(const ChinxTargetMachine &TM,$/;"	f	class:ChinxTargetLowering
ChinxTargetLowering	ChinxISelLowering.h	/^  class ChinxTargetLowering : public TargetLowering  {$/;"	c	namespace:llvm
ChinxTargetMachine	ChinxTargetMachine.cpp	/^ChinxTargetMachine::ChinxTargetMachine(const Target &T, const Triple &TT,$/;"	f	class:ChinxTargetMachine
ChinxTargetMachine	ChinxTargetMachine.h	/^class ChinxTargetMachine : public LLVMTargetMachine {$/;"	c	namespace:llvm
ChinxTargetObjectFile	ChinxTargetObjectFile.h	/^	class ChinxTargetObjectFile : $/;"	c	namespace:llvm
DEBUG_TYPE	ChinxISelLowering.cpp	38;"	d	file:
DEBUG_TYPE	ChinxRegisterInfo.cpp	27;"	d	file:
DEBUG_TYPE	ChinxSEISelLowering.cpp	28;"	d	file:
DEBUG_TYPE	ChinxSERegisterInfo.cpp	19;"	d	file:
DEBUG_TYPE	ChinxSubtarget.cpp	28;"	d	file:
DEBUG_TYPE	ChinxTargetMachine.cpp	26;"	d	file:
DefaultSubtarget	ChinxTargetMachine.h	/^  ChinxSubtarget DefaultSubtarget;$/;"	m	class:llvm::ChinxTargetMachine
EhDataRegSize	MCTargetDesc/ChinxABIInfo.cpp	/^int ChinxABIInfo::EhDataRegSize() const {$/;"	f	class:ChinxABIInfo
EmitInstrWithCustomInserter	ChinxSEISelLowering.cpp	/^ChinxSETargetLowering::EmitInstrWithCustomInserter(MachineInstr &MI,$/;"	f	class:ChinxSETargetLowering
EnableOverflow	ChinxSubtarget.h	/^  bool EnableOverflow;$/;"	m	class:llvm::ChinxSubtarget
FeatureEnum	ChinxSubtarget.h	/^  enum FeatureEnum {$/;"	g	class:llvm::ChinxSubtarget
FirstIdx	ChinxISelLowering.h	/^      unsigned FirstIdx; \/\/ Index of the first register used.$/;"	m	struct:llvm::ChinxTargetLowering::ByValArgInfo
FrameLowering	ChinxSubtarget.h	/^  std::unique_ptr<const ChinxFrameLowering> FrameLowering;$/;"	m	class:llvm::ChinxSubtarget
GET_INSTRINFO_CTOR_DTOR	ChinxInstrInfo.cpp	25;"	d	file:
GET_INSTRINFO_ENUM	MCTargetDesc/ChinxMCTargetDesc.h	16;"	d
GET_INSTRINFO_HEADER	ChinxInstrInfo.h	23;"	d
GET_INSTRINFO_MC_DESC	MCTargetDesc/ChinxMCTargetDesc.cpp	18;"	d	file:
GET_REGINFO_ENUM	MCTargetDesc/ChinxMCTargetDesc.h	13;"	d
GET_REGINFO_HEADER	ChinxRegisterInfo.h	20;"	d
GET_REGINFO_MC_DESC	MCTargetDesc/ChinxMCTargetDesc.cpp	24;"	d	file:
GET_REGINFO_TARGET_DESC	ChinxRegisterInfo.cpp	29;"	d	file:
GET_SUBTARGETINFO_CTOR	ChinxSubtarget.cpp	31;"	d	file:
GET_SUBTARGETINFO_ENUM	MCTargetDesc/ChinxMCTargetDesc.h	19;"	d
GET_SUBTARGETINFO_HEADER	ChinxSubtarget.h	27;"	d
GET_SUBTARGETINFO_MC_DESC	MCTargetDesc/ChinxMCTargetDesc.cpp	21;"	d	file:
GET_SUBTARGETINFO_TARGET_DESC	ChinxSubtarget.cpp	30;"	d	file:
GetByValArgRegs	MCTargetDesc/ChinxABIInfo.cpp	/^const ArrayRef<MCPhysReg> ChinxABIInfo::GetByValArgRegs() const {$/;"	f	class:ChinxABIInfo
GetCalleeAllocdArgSizeInBytes	MCTargetDesc/ChinxABIInfo.cpp	/^unsigned ChinxABIInfo::GetCalleeAllocdArgSizeInBytes(CallingConv::ID CC) const {$/;"	f	class:ChinxABIInfo
GetEhDataReg	MCTargetDesc/ChinxABIInfo.cpp	/^unsigned ChinxABIInfo::GetEhDataReg(unsigned I) const {$/;"	f	class:ChinxABIInfo
GetEnumValue	MCTargetDesc/ChinxABIInfo.h	/^  ABI GetEnumValue() const { return ThisABI; }$/;"	f	class:llvm::ChinxABIInfo
GetFramePtr	MCTargetDesc/ChinxABIInfo.cpp	/^unsigned ChinxABIInfo::GetFramePtr() const {$/;"	f	class:ChinxABIInfo
GetInstSizeInBytes	ChinxInstrInfo.cpp	/^unsigned ChinxInstrInfo::GetInstSizeInBytes(const MachineInstr &MI) const {$/;"	f	class:ChinxInstrInfo
GetNullPtr	MCTargetDesc/ChinxABIInfo.cpp	/^unsigned ChinxABIInfo::GetNullPtr() const {$/;"	f	class:ChinxABIInfo
GetStackPtr	MCTargetDesc/ChinxABIInfo.cpp	/^unsigned ChinxABIInfo::GetStackPtr() const {$/;"	f	class:ChinxABIInfo
GetVarArgRegs	MCTargetDesc/ChinxABIInfo.cpp	/^const ArrayRef<MCPhysReg> ChinxABIInfo::GetVarArgRegs() const {$/;"	f	class:ChinxABIInfo
HasCall	ChinxSubtarget.h	/^  bool HasCall;$/;"	m	class:llvm::ChinxSubtarget
HasPush	ChinxSubtarget.h	/^  bool HasPush;$/;"	m	class:llvm::ChinxSubtarget
Initialize	ChinxTargetObjectFile.cpp	/^void ChinxTargetObjectFile::Initialize(MCContext $Ctx, const TargetMachine &TM) {$/;"	f	class:ChinxTargetObjectFile
InstrInfo	ChinxSubtarget.h	/^  std::unique_ptr<const ChinxInstrInfo> InstrInfo;$/;"	m	class:llvm::ChinxSubtarget
InstrItins	ChinxSubtarget.h	/^  InstrItineraryData InstrItins;$/;"	m	class:llvm::ChinxSubtarget
IsKnown	MCTargetDesc/ChinxABIInfo.h	/^  bool IsKnown() const { return ThisABI != ABI::Unknown; }$/;"	f	class:llvm::ChinxABIInfo
IsO32	MCTargetDesc/ChinxABIInfo.h	/^  bool IsO32() const { return ThisABI == ABI::O32; }$/;"	f	class:llvm::ChinxABIInfo
IsS32	MCTargetDesc/ChinxABIInfo.h	/^  bool IsS32() const { return ThisABI == ABI::S32; }$/;"	f	class:llvm::ChinxABIInfo
LLVMInitializeChinxTargetInfo	TargetInfo/ChinxTargetInfo.cpp	/^extern "C" void LLVMInitializeChinxTargetInfo() {$/;"	f
LLVMInitializeChinxTargetMC	MCTargetDesc/ChinxMCTargetDesc.cpp	/^extern "C" void LLVMInitializeChinxTargetMC() {$/;"	f
LLVMInitializeMipsTarget	ChinxTargetMachine.cpp	/^extern "C" void LLVMInitializeMipsTarget() {$/;"	f
LLVM_LIB_TARGET_CHINX_CHINXFRAMELOWERING_H	ChinxFrameLowering.h	15;"	d
LLVM_LIB_TARGET_CHINX_CHINXINSTRINFO_H	ChinxInstrInfo.h	15;"	d
LLVM_LIB_TARGET_CHINX_CHINXISELLOWERING_H	ChinxISelLowering.h	16;"	d
LLVM_LIB_TARGET_CHINX_CHINXMACHINEFUNCTION_H	ChinxMachineFunction.h	15;"	d
LLVM_LIB_TARGET_CHINX_CHINXREGISTERINFO_H	ChinxRegisterInfo.h	15;"	d
LLVM_LIB_TARGET_CHINX_CHINXSEFRAMELOWERING_H	ChinxSEFrameLowering.h	15;"	d
LLVM_LIB_TARGET_CHINX_CHINXSEISELLOWERING_H	ChinxSEISelLowering.h	15;"	d
LLVM_LIB_TARGET_CHINX_CHINXSEREGISTERINFO_H	ChinxSERegisterInfo.h	16;"	d
LLVM_LIB_TARGET_CHINX_CHINXSUBTARGET_H	ChinxSubtarget.h	15;"	d
LLVM_LIB_TARGET_CHINX_CHINXTARGETMACHINE_H	ChinxTargetMachine.h	15;"	d
LLVM_LIB_TARGET_CHINX_CHINXTARGETOBJECTFILE_H	ChinxTargetObjectFile.h	2;"	d
LLVM_LIB_TARGET_CHINX_CHINX_H	Chinx.h	2;"	d
LLVM_LIB_TARGET_CHINX_MCTARGETDESC_CHINXABIINFO_H	MCTargetDesc/ChinxABIInfo.h	11;"	d
LLVM_LIB_TARGET_CHINX_MCTARGETDESC_CHINXMCTARGETDESC_H	MCTargetDesc/ChinxMCTargetDesc.h	2;"	d
LowerFormalArguments	ChinxISelLowering.cpp	/^SDValue ChinxTargetLowering::LowerFormalArguments($/;"	f	class:ChinxTargetLowering
LowerOperation	ChinxSEISelLowering.cpp	/^SDValue ChinxSETargetLowering::LowerOperation(SDValue Op,$/;"	f	class:ChinxSETargetLowering
LowerReturn	ChinxISelLowering.cpp	/^ChinxTargetLowering::LowerReturn(SDValue Chain, CallingConv::ID CallConv,$/;"	f	class:ChinxTargetLowering
MF	ChinxMachineFunction.h	/^  MachineFunction& MF;$/;"	m	class:llvm::ChinxFunctionInfo
MaxCallFrameSize	ChinxMachineFunction.h	/^  unsigned MaxCallFrameSize;$/;"	m	class:llvm::ChinxFunctionInfo
NumRegs	ChinxISelLowering.h	/^      unsigned NumRegs; \/\/ Number of registers used for this argument.$/;"	m	struct:llvm::ChinxTargetLowering::ByValArgInfo
O32	MCTargetDesc/ChinxABIInfo.h	/^  enum class ABI { Unknown, O32, S32 };$/;"	m	class:llvm::ChinxABIInfo::ABI
O32	MCTargetDesc/ChinxABIInfo.h	/^  static ChinxABIInfo O32() { return ChinxABIInfo(ABI::O32); }$/;"	f	class:llvm::ChinxABIInfo
O32IntRegs	MCTargetDesc/ChinxABIInfo.cpp	/^static const MCPhysReg O32IntRegs[4] = {Chinx::A0, Chinx::A1, Chinx::A2, Chinx::A3};$/;"	m	namespace:__anon2	file:
PerformDAGCombine	ChinxSEISelLowering.cpp	/^ChinxSETargetLowering::PerformDAGCombine(SDNode *N, DAGCombinerInfo &DCI) const {$/;"	f	class:ChinxSETargetLowering
S32	MCTargetDesc/ChinxABIInfo.h	/^  static ChinxABIInfo S32() { return ChinxABIInfo(ABI::S32); }$/;"	f	class:llvm::ChinxABIInfo
S32IntRegs	MCTargetDesc/ChinxABIInfo.cpp	/^static const MCPhysReg S32IntRegs = {};$/;"	m	namespace:__anon2	file:
STI	ChinxFrameLowering.h	/^    const ChinxSubtarget &STI;$/;"	m	class:llvm::ChinxFrameLowering
SmallBSSSection	ChinxTargetObjectFile.h	/^		MCSection *SmallBSSSection;$/;"	m	class:llvm::ChinxTargetObjectFile
SmallDataSection	ChinxTargetObjectFile.h	/^		MCSection *SmallDataSection;$/;"	m	class:llvm::ChinxTargetObjectFile
Subtarget	ChinxISelLowering.h	/^    const ChinxSubtarget &Subtarget;$/;"	m	class:llvm::ChinxTargetLowering
Subtarget	ChinxInstrInfo.h	/^  const ChinxSubtarget &Subtarget;$/;"	m	class:llvm::ChinxInstrInfo
Subtarget	ChinxRegisterInfo.h	/^  const ChinxSubtarget &Subtarget;$/;"	m	class:llvm::ChinxRegisterInfo
SubtargetMap	ChinxTargetMachine.h	/^  mutable StringMap<std::unique_ptr<ChinxSubtarget>> SubtargetMap;$/;"	m	class:llvm::ChinxTargetMachine
TLInfo	ChinxSubtarget.h	/^  std::unique_ptr<const ChinxTargetLowering> TLInfo;$/;"	m	class:llvm::ChinxSubtarget
TLOF	ChinxTargetMachine.h	/^  std::unique_ptr<TargetLoweringObjectFile> TLOF;$/;"	m	class:llvm::ChinxTargetMachine
TM	ChinxSubtarget.h	/^  const ChinxTargetMachine &TM;$/;"	m	class:llvm::ChinxSubtarget
TM	ChinxTargetObjectFile.h	/^		const ChinxTargetMachine *TM;$/;"	m	class:llvm::ChinxTargetObjectFile
TSInfo	ChinxSubtarget.h	/^  const SelectionDAGTargetInfo TSInfo;$/;"	m	class:llvm::ChinxSubtarget
TargetTriple	ChinxSubtarget.h	/^  Triple TargetTriple;$/;"	m	class:llvm::ChinxSubtarget
ThisABI	MCTargetDesc/ChinxABIInfo.h	/^  ABI ThisABI;$/;"	m	class:llvm::ChinxABIInfo
Unknown	MCTargetDesc/ChinxABIInfo.h	/^  enum class ABI { Unknown, O32, S32 };$/;"	m	class:llvm::ChinxABIInfo::ABI
Unknown	MCTargetDesc/ChinxABIInfo.h	/^  static ChinxABIInfo Unknown() { return ChinxABIInfo(ABI::Unknown); }$/;"	f	class:llvm::ChinxABIInfo
VarArgsFrameIndex	ChinxMachineFunction.h	/^  int VarArgsFrameIndex;$/;"	m	class:llvm::ChinxFunctionInfo
abiUsesSoftFloat	ChinxSubtarget.cpp	/^bool ChinxSubtarget::abiUsesSoftFloat() const {$/;"	f	class:ChinxSubtarget
anchor	ChinxInstrInfo.cpp	/^void ChinxInstrInfo::anchor() {}$/;"	f	class:ChinxInstrInfo
anchor	ChinxMachineFunction.cpp	/^void ChinxFunctionInfo::anchor() {}$/;"	f	class:ChinxFunctionInfo
anchor	ChinxSubtarget.cpp	/^void ChinxSubtarget::anchor() {}$/;"	f	class:ChinxSubtarget
anchor	ChinxTargetMachine.cpp	/^void ChinxTargetMachine::anchor() { }$/;"	f	class:ChinxTargetMachine
computeDataLayout	ChinxTargetMachine.cpp	/^static std::string computeDataLayout(const Triple &TT, StringRef CPU,$/;"	f	file:
computeTargetABI	MCTargetDesc/ChinxABIInfo.cpp	/^ChinxABIInfo ChinxABIInfo::computeTargetABI() {$/;"	f	class:ChinxABIInfo
create	ChinxFrameLowering.cpp	/^const ChinxFrameLowering *ChinxFrameLowering::create(const ChinxSubtarget &ST) {$/;"	f	class:ChinxFrameLowering
create	ChinxISelLowering.cpp	/^const ChinxTargetLowering *ChinxTargetLowering::create(const ChinxTargetMachine &TM,$/;"	f	class:ChinxTargetLowering
create	ChinxInstrInfo.cpp	/^const ChinxInstrInfo *ChinxInstrInfo::create(ChinxSubtarget &STI) {$/;"	f	class:ChinxInstrInfo
createChinxSEFrameLowering	ChinxSEFrameLowering.cpp	/^llvm::createChinxSEFrameLowering(const ChinxSubtarget &ST) {$/;"	f	class:llvm
createChinxSETargetLowering	ChinxSEISelLowering.cpp	/^llvm::createChinxSETargetLowering(const ChinxTargetMachine &TM,$/;"	f	class:llvm
createPassConfig	ChinxTargetMachine.cpp	/^TargetPassConfig *ChinxTargetMachine::createPassConfig(PassManagerBase &PM) {$/;"	f	class:ChinxTargetMachine
disableOverflow	ChinxSubtarget.h	/^  bool disableOverflow() const { return !EnableOverflow; }$/;"	f	class:llvm::ChinxSubtarget
eliminateFrameIndex	ChinxRegisterInfo.cpp	/^eliminateFrameIndex(MachineBasicBlock::iterator II, int SPAdj,$/;"	f	class:ChinxRegisterInfo
emitBPOSGE32	ChinxSEISelLowering.cpp	/^ChinxSETargetLowering::emitBPOSGE32(MachineInstr &MI,$/;"	f	class:ChinxSETargetLowering
emitCOPY_FD	ChinxSEISelLowering.cpp	/^ChinxSETargetLowering::emitCOPY_FD(MachineInstr &MI,$/;"	f	class:ChinxSETargetLowering
emitCOPY_FW	ChinxSEISelLowering.cpp	/^ChinxSETargetLowering::emitCOPY_FW(MachineInstr &MI,$/;"	f	class:ChinxSETargetLowering
emitEpilogue	ChinxSEFrameLowering.cpp	/^void ChinxSEFrameLowering::emitEpilogue(MachineFunction &MF,$/;"	f	class:ChinxSEFrameLowering
emitFEXP2_D_1	ChinxSEISelLowering.cpp	/^ChinxSETargetLowering::emitFEXP2_D_1(MachineInstr &MI,$/;"	f	class:ChinxSETargetLowering
emitFEXP2_W_1	ChinxSEISelLowering.cpp	/^ChinxSETargetLowering::emitFEXP2_W_1(MachineInstr &MI,$/;"	f	class:ChinxSETargetLowering
emitFILL_FD	ChinxSEISelLowering.cpp	/^ChinxSETargetLowering::emitFILL_FD(MachineInstr &MI,$/;"	f	class:ChinxSETargetLowering
emitFILL_FW	ChinxSEISelLowering.cpp	/^ChinxSETargetLowering::emitFILL_FW(MachineInstr &MI,$/;"	f	class:ChinxSETargetLowering
emitINSERT_DF_VIDX	ChinxSEISelLowering.cpp	/^MachineBasicBlock *ChinxSETargetLowering::emitINSERT_DF_VIDX($/;"	f	class:ChinxSETargetLowering
emitINSERT_FD	ChinxSEISelLowering.cpp	/^ChinxSETargetLowering::emitINSERT_FD(MachineInstr &MI,$/;"	f	class:ChinxSETargetLowering
emitINSERT_FW	ChinxSEISelLowering.cpp	/^ChinxSETargetLowering::emitINSERT_FW(MachineInstr &MI,$/;"	f	class:ChinxSETargetLowering
emitMSACBranchPseudo	ChinxSEISelLowering.cpp	/^MachineBasicBlock *ChinxSETargetLowering::emitMSACBranchPseudo($/;"	f	class:ChinxSETargetLowering
emitPrologue	ChinxSEFrameLowering.cpp	/^void ChinxSEFrameLowering::emitPrologue(MachineFunction &MF,$/;"	f	class:ChinxSEFrameLowering
enableInterruptPass	ChinxSubtarget.h	/^  bool enableInterruptPass() const {$/;"	f	class:llvm::ChinxSubtarget
enableOverflow	ChinxSubtarget.h	/^  bool enableOverflow() const { return EnableOverflow; }$/;"	f	class:llvm::ChinxSubtarget
extractLOHI	ChinxSEISelLowering.cpp	/^static SDValue extractLOHI(SDValue Op, const SDLoc &DL, SelectionDAG &DAG) {$/;"	f	file:
fitsRegularPattern	ChinxSEISelLowering.cpp	/^fitsRegularPattern(typename SmallVectorImpl<ValType>::const_iterator Begin,$/;"	f	file:
genConstMult	ChinxSEISelLowering.cpp	/^static SDValue genConstMult(SDValue X, uint64_t C, const SDLoc &DL, EVT VT,$/;"	f	file:
getABI	ChinxSubtarget.cpp	/^const ChinxABIInfo &ChinxSubtarget::getABI() const { return TM.getABI(); }$/;"	f	class:ChinxSubtarget
getABI	ChinxTargetMachine.h	/^  const ChinxABIInfo &getABI() const { return ABI; }$/;"	f	class:llvm::ChinxTargetMachine
getBuildVectorSplat	ChinxSEISelLowering.cpp	/^static SDValue getBuildVectorSplat(EVT VecTy, SDValue SplatValue,$/;"	f	file:
getCallPreservedMask	ChinxRegisterInfo.cpp	/^ChinxRegisterInfo::getCallPreservedMask(const MachineFunction &MF,$/;"	f	class:ChinxRegisterInfo
getCalleeSavedRegs	ChinxRegisterInfo.cpp	/^ChinxRegisterInfo::getCalleeSavedRegs(const MachineFunction *MF) const {$/;"	f	class:ChinxRegisterInfo
getChinxSubtarget	ChinxTargetMachine.cpp	/^  const ChinxSubtarget &getChinxSubtarget() const {$/;"	f	class:__anon1::ChinxPassConfig
getChinxTargetMachine	ChinxTargetMachine.cpp	/^  ChinxTargetMachine &getChinxTargetMachine() const {$/;"	f	class:__anon1::ChinxPassConfig
getEffectiveRelocModel	ChinxTargetMachine.cpp	/^static Reloc::Model getEffectiveRelocModel(CodeModel::Model CM,$/;"	f	file:
getFrameRegister	ChinxRegisterInfo.cpp	/^getFrameRegister(const MachineFunction &MF) const {$/;"	f	class:ChinxRegisterInfo
getOpndList	ChinxSEISelLowering.cpp	/^getOpndList(SmallVectorImpl<SDValue> &Ops,$/;"	f	class:ChinxSETargetLowering
getReservedRegs	ChinxRegisterInfo.cpp	/^getReservedRegs(const MachineFunction &MF) const {$/;"	f	class:ChinxRegisterInfo
getSubtargetImpl	ChinxTargetMachine.cpp	/^ChinxTargetMachine::getSubtargetImpl(const Function &F) const {$/;"	f	class:ChinxTargetMachine
getSubtargetImpl	ChinxTargetMachine.h	/^  const ChinxSubtarget *getSubtargetImpl() const {$/;"	f	class:llvm::ChinxTargetMachine
getTargetNodeName	ChinxISelLowering.cpp	/^const char *ChinxTargetLowering::getTargetNodeName(unsigned Opcode) const {$/;"	f	class:ChinxTargetLowering
getVarArgsFrameIndex	ChinxMachineFunction.h	/^  int getVarArgsFrameIndex() const { return VarArgsFrameIndex; }$/;"	f	class:llvm::ChinxFunctionInfo
hasAll	ChinxSubtarget.h	/^  bool hasAll;$/;"	m	class:llvm::ChinxSubtarget
hasCall	ChinxSubtarget.h	/^  bool hasCall() const { return HasCall; }$/;"	f	class:llvm::ChinxSubtarget
hasChinxI	ChinxSubtarget.h	/^  bool hasChinxI() const { return ChinxArchVersion >= ChinxI; }$/;"	f	class:llvm::ChinxSubtarget
hasChinxII	ChinxSubtarget.h	/^  bool hasChinxII() const { return ChinxArchVersion >= ChinxII; }$/;"	f	class:llvm::ChinxSubtarget
hasDummy	ChinxSubtarget.h	/^  bool hasDummy;$/;"	m	class:llvm::ChinxSubtarget
hasFP	ChinxFrameLowering.cpp	/^bool ChinxFrameLowering::hasFP(const MachineFunction &MF) const {$/;"	f	class:ChinxFrameLowering
hasFeature_1	ChinxSubtarget.h	/^  bool hasFeature_1() const { return ChinxFeatureVersion >= Chinx1; }$/;"	f	class:llvm::ChinxSubtarget
hasFeature_2	ChinxSubtarget.h	/^  bool hasFeature_2() const { return ChinxFeatureVersion >= Chinx2; }$/;"	f	class:llvm::ChinxSubtarget
hasFeature_3	ChinxSubtarget.h	/^  bool hasFeature_3() const { return ChinxFeatureVersion >= Chinx3; }$/;"	f	class:llvm::ChinxSubtarget
hasFeature_All	ChinxSubtarget.h	/^  bool hasFeature_All() const { return ChinxFeatureVersion >= ChinxMax; }$/;"	f	class:llvm::ChinxSubtarget
hasPush	ChinxSubtarget.h	/^  bool hasPush() const { return HasPush; }$/;"	f	class:llvm::ChinxSubtarget
initAccumulator	ChinxSEISelLowering.cpp	/^static SDValue initAccumulator(SDValue In, const SDLoc &DL, SelectionDAG &DAG) {$/;"	f	file:
initializeSubtargetDependencies	ChinxSubtarget.cpp	/^ChinxSubtarget::initializeSubtargetDependencies(StringRef CPU, StringRef FS,$/;"	f	class:ChinxSubtarget
intRegClass	ChinxSERegisterInfo.cpp	/^ChinxSERegisterInfo::intRegClass(unsigned Size) const {$/;"	f	class:ChinxSERegisterInfo
isBitwiseInverse	ChinxSEISelLowering.cpp	/^static bool isBitwiseInverse(SDValue N, SDValue OfNode) {$/;"	f	file:
isChinxI	ChinxSubtarget.h	/^  bool isChinxI() const { return ChinxArchVersion == ChinxI; }$/;"	f	class:llvm::ChinxSubtarget
isChinxII	ChinxSubtarget.h	/^  bool isChinxII() const { return ChinxArchVersion == ChinxII; }$/;"	f	class:llvm::ChinxSubtarget
isConstantOrUndef	ChinxSEISelLowering.cpp	/^static bool isConstantOrUndef(const SDValue Op) {$/;"	f	file:
isConstantOrUndefBUILD_VECTOR	ChinxSEISelLowering.cpp	/^static bool isConstantOrUndefBUILD_VECTOR(const BuildVectorSDNode *Op) {$/;"	f	file:
isEligibleForTailCallOptimization	ChinxSEISelLowering.cpp	/^bool ChinxSETargetLowering::isEligibleForTailCallOptimization($/;"	f	class:ChinxSETargetLowering
isLegalDSPCondCode	ChinxSEISelLowering.cpp	/^static bool isLegalDSPCondCode(EVT Ty, ISD::CondCode CC) {$/;"	f	file:
isLittle	ChinxSubtarget.h	/^  bool isLittle() const { return true; }$/;"	f	class:llvm::ChinxSubtarget
isLittleEndian	ChinxTargetMachine.h	/^  bool isLittleEndian() const { return true; }$/;"	f	class:llvm::ChinxTargetMachine
isPositionIndependent	ChinxSubtarget.cpp	/^bool ChinxSubtarget::isPositionIndependent() const {$/;"	f	class:ChinxSubtarget
isSplatVector	ChinxSEISelLowering.cpp	/^static bool isSplatVector(const BuildVectorSDNode *N) {$/;"	f	file:
isVECTOR_SHUFFLE_SPLATI	ChinxSEISelLowering.cpp	/^static bool isVECTOR_SHUFFLE_SPLATI(SDValue Op, EVT ResTy,$/;"	f	file:
isVSplat	ChinxSEISelLowering.cpp	/^static bool isVSplat(SDValue N, APInt &Imm, bool IsLittleEndian) {$/;"	f	file:
isVectorAllOnes	ChinxSEISelLowering.cpp	/^static bool isVectorAllOnes(SDValue N) {$/;"	f	file:
llvm	Chinx.h	/^namespace llvm {$/;"	n
llvm	ChinxFrameLowering.h	/^namespace llvm {$/;"	n
llvm	ChinxISelLowering.h	/^namespace llvm {$/;"	n
llvm	ChinxInstrInfo.h	/^namespace llvm {$/;"	n
llvm	ChinxMachineFunction.h	/^namespace llvm {$/;"	n
llvm	ChinxRegisterInfo.h	/^namespace llvm {$/;"	n
llvm	ChinxSEFrameLowering.h	/^namespace llvm {$/;"	n
llvm	ChinxSEISelLowering.h	/^namespace llvm {$/;"	n
llvm	ChinxSERegisterInfo.h	/^namespace llvm {$/;"	n
llvm	ChinxSubtarget.h	/^namespace llvm {$/;"	n
llvm	ChinxTargetMachine.h	/^namespace llvm {$/;"	n
llvm	ChinxTargetObjectFile.h	/^namespace llvm {$/;"	n
llvm	MCTargetDesc/ChinxABIInfo.h	/^namespace llvm {$/;"	n
llvm	MCTargetDesc/ChinxMCTargetDesc.h	/^namespace llvm {$/;"	n
lowerBUILD_VECTOR	ChinxSEISelLowering.cpp	/^SDValue ChinxSETargetLowering::lowerBUILD_VECTOR(SDValue Op,$/;"	f	class:ChinxSETargetLowering
lowerDSPIntr	ChinxSEISelLowering.cpp	/^static SDValue lowerDSPIntr(SDValue Op, SelectionDAG &DAG, unsigned Opc) {$/;"	f	file:
lowerEXTRACT_VECTOR_ELT	ChinxSEISelLowering.cpp	/^lowerEXTRACT_VECTOR_ELT(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:ChinxSETargetLowering
lowerINTRINSIC_VOID	ChinxSEISelLowering.cpp	/^SDValue ChinxSETargetLowering::lowerINTRINSIC_VOID(SDValue Op,$/;"	f	class:ChinxSETargetLowering
lowerINTRINSIC_WO_CHAIN	ChinxSEISelLowering.cpp	/^SDValue ChinxSETargetLowering::lowerINTRINSIC_WO_CHAIN(SDValue Op,$/;"	f	class:ChinxSETargetLowering
lowerINTRINSIC_W_CHAIN	ChinxSEISelLowering.cpp	/^SDValue ChinxSETargetLowering::lowerINTRINSIC_W_CHAIN(SDValue Op,$/;"	f	class:ChinxSETargetLowering
lowerLOAD	ChinxSEISelLowering.cpp	/^SDValue ChinxSETargetLowering::lowerLOAD(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:ChinxSETargetLowering
lowerMSABinaryBitImmIntr	ChinxSEISelLowering.cpp	/^static SDValue lowerMSABinaryBitImmIntr(SDValue Op, SelectionDAG &DAG,$/;"	f	file:
lowerMSABitClear	ChinxSEISelLowering.cpp	/^static SDValue lowerMSABitClear(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
lowerMSABitClearImm	ChinxSEISelLowering.cpp	/^static SDValue lowerMSABitClearImm(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
lowerMSACopyIntr	ChinxSEISelLowering.cpp	/^static SDValue lowerMSACopyIntr(SDValue Op, SelectionDAG &DAG, unsigned Opc) {$/;"	f	file:
lowerMSALoadIntr	ChinxSEISelLowering.cpp	/^static SDValue lowerMSALoadIntr(SDValue Op, SelectionDAG &DAG, unsigned Intr) {$/;"	f	file:
lowerMSASplatImm	ChinxSEISelLowering.cpp	/^static SDValue lowerMSASplatImm(SDValue Op, unsigned ImmOp, SelectionDAG &DAG) {$/;"	f	file:
lowerMSASplatZExt	ChinxSEISelLowering.cpp	/^static SDValue lowerMSASplatZExt(SDValue Op, unsigned OpNr, SelectionDAG &DAG) {$/;"	f	file:
lowerMSAStoreIntr	ChinxSEISelLowering.cpp	/^static SDValue lowerMSAStoreIntr(SDValue Op, SelectionDAG &DAG, unsigned Intr) {$/;"	f	file:
lowerMulDiv	ChinxSEISelLowering.cpp	/^SDValue ChinxSETargetLowering::lowerMulDiv(SDValue Op, unsigned NewOpc,$/;"	f	class:ChinxSETargetLowering
lowerSTORE	ChinxSEISelLowering.cpp	/^SDValue ChinxSETargetLowering::lowerSTORE(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:ChinxSETargetLowering
lowerVECTOR_SHUFFLE	ChinxSEISelLowering.cpp	/^SDValue ChinxSETargetLowering::lowerVECTOR_SHUFFLE(SDValue Op,$/;"	f	class:ChinxSETargetLowering
lowerVECTOR_SHUFFLE_ILVEV	ChinxSEISelLowering.cpp	/^static SDValue lowerVECTOR_SHUFFLE_ILVEV(SDValue Op, EVT ResTy,$/;"	f	file:
lowerVECTOR_SHUFFLE_ILVL	ChinxSEISelLowering.cpp	/^static SDValue lowerVECTOR_SHUFFLE_ILVL(SDValue Op, EVT ResTy,$/;"	f	file:
lowerVECTOR_SHUFFLE_ILVOD	ChinxSEISelLowering.cpp	/^static SDValue lowerVECTOR_SHUFFLE_ILVOD(SDValue Op, EVT ResTy,$/;"	f	file:
lowerVECTOR_SHUFFLE_ILVR	ChinxSEISelLowering.cpp	/^static SDValue lowerVECTOR_SHUFFLE_ILVR(SDValue Op, EVT ResTy,$/;"	f	file:
lowerVECTOR_SHUFFLE_PCKEV	ChinxSEISelLowering.cpp	/^static SDValue lowerVECTOR_SHUFFLE_PCKEV(SDValue Op, EVT ResTy,$/;"	f	file:
lowerVECTOR_SHUFFLE_PCKOD	ChinxSEISelLowering.cpp	/^static SDValue lowerVECTOR_SHUFFLE_PCKOD(SDValue Op, EVT ResTy,$/;"	f	file:
lowerVECTOR_SHUFFLE_SHF	ChinxSEISelLowering.cpp	/^static SDValue lowerVECTOR_SHUFFLE_SHF(SDValue Op, EVT ResTy,$/;"	f	file:
lowerVECTOR_SHUFFLE_VSHF	ChinxSEISelLowering.cpp	/^static SDValue lowerVECTOR_SHUFFLE_VSHF(SDValue Op, EVT ResTy,$/;"	f	file:
operator <	MCTargetDesc/ChinxABIInfo.h	/^  bool operator<(const ChinxABIInfo Other) const {$/;"	f	class:llvm::ChinxABIInfo
override	ChinxFrameLowering.h	/^  bool hasFP(const MachineFunction &MF) const override;$/;"	m	class:llvm::ChinxFrameLowering
override	ChinxISelLowering.h	/^                                 SmallVectorImpl<SDValue> &InVals) const override;$/;"	m	class:llvm::ChinxTargetLowering
override	ChinxISelLowering.h	/^                        const SDLoc &dl, SelectionDAG &DAG) const override;$/;"	m	class:llvm::ChinxTargetLowering
override	ChinxISelLowering.h	/^    const char *getTargetNodeName(unsigned Opcode) const override;$/;"	m	class:llvm::ChinxTargetLowering
override	ChinxRegisterInfo.h	/^                                       CallingConv::ID) const override;$/;"	m	class:llvm::ChinxRegisterInfo
override	ChinxRegisterInfo.h	/^                           RegScavenger *RS = nullptr) const override;$/;"	m	class:llvm::ChinxRegisterInfo
override	ChinxRegisterInfo.h	/^  BitVector getReservedRegs(const MachineFunction &MF) const override;$/;"	m	class:llvm::ChinxRegisterInfo
override	ChinxRegisterInfo.h	/^  bool requiresRegisterScavenging(const MachineFunction &MF) const override;$/;"	m	class:llvm::ChinxRegisterInfo
override	ChinxRegisterInfo.h	/^  bool trackLivenessAfterRegAlloc(const MachineFunction &MF) const override;$/;"	m	class:llvm::ChinxRegisterInfo
override	ChinxRegisterInfo.h	/^  const MCPhysReg *getCalleeSavedRegs(const MachineFunction *MF) const override;$/;"	m	class:llvm::ChinxRegisterInfo
override	ChinxRegisterInfo.h	/^  unsigned getFrameRegister(const MachineFunction &MF) const override;$/;"	m	class:llvm::ChinxRegisterInfo
override	ChinxSEFrameLowering.h	/^  void emitEpilogue(MachineFunction &MF, MachineBasicBlock &MBB) const override;$/;"	m	class:llvm::ChinxSEFrameLowering
override	ChinxSEFrameLowering.h	/^  void emitPrologue(MachineFunction &MF, MachineBasicBlock &MBB) const override;$/;"	m	class:llvm::ChinxSEFrameLowering
override	ChinxSEISelLowering.h	/^    SDValue LowerOperation(SDValue Op, SelectionDAG &DAG) const override;$/;"	m	class:llvm::ChinxSETargetLowering
override	ChinxSERegisterInfo.h	/^  const TargetRegisterClass *intRegClass(unsigned Size) const override;$/;"	m	class:llvm::ChinxSERegisterInfo
override	ChinxTargetMachine.h	/^  TargetPassConfig *createPassConfig(PassManagerBase &PM) override;$/;"	m	class:llvm::ChinxTargetMachine
override	ChinxTargetMachine.h	/^  const ChinxSubtarget *getSubtargetImpl(const Function &F) const override;$/;"	m	class:llvm::ChinxTargetMachine
override	ChinxTargetMachine.h	/^  ~ChinxTargetMachine() override;$/;"	m	class:llvm::ChinxTargetMachine
override	ChinxTargetObjectFile.h	/^		void Initialize(MCContext &Ctx, const TargetMachine &TM) override;$/;"	m	class:llvm::ChinxTargetObjectFile
performADDECombine	ChinxSEISelLowering.cpp	/^static SDValue performADDECombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
performANDCombine	ChinxSEISelLowering.cpp	/^static SDValue performANDCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
performDSPShiftCombine	ChinxSEISelLowering.cpp	/^static SDValue performDSPShiftCombine(unsigned Opc, SDNode *N, EVT Ty,$/;"	f	file:
performMULCombine	ChinxSEISelLowering.cpp	/^static SDValue performMULCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
performORCombine	ChinxSEISelLowering.cpp	/^static SDValue performORCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
performSETCCCombine	ChinxSEISelLowering.cpp	/^static SDValue performSETCCCombine(SDNode *N, SelectionDAG &DAG) {$/;"	f	file:
performSHLCombine	ChinxSEISelLowering.cpp	/^static SDValue performSHLCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
performSRACombine	ChinxSEISelLowering.cpp	/^static SDValue performSRACombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
performSRLCombine	ChinxSEISelLowering.cpp	/^static SDValue performSRLCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
performSUBECombine	ChinxSEISelLowering.cpp	/^static SDValue performSUBECombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
performVSELECTCombine	ChinxSEISelLowering.cpp	/^static SDValue performVSELECTCombine(SDNode *N, SelectionDAG &DAG) {$/;"	f	file:
performXORCombine	ChinxSEISelLowering.cpp	/^static SDValue performXORCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
requiresRegisterScavenging	ChinxRegisterInfo.cpp	/^ChinxRegisterInfo::requiresRegisterScavenging(const MachineFunction &MF) const {$/;"	f	class:ChinxRegisterInfo
selectMADD	ChinxSEISelLowering.cpp	/^static bool selectMADD(SDNode *ADDENode, SelectionDAG *CurDAG) {$/;"	f	file:
selectMSUB	ChinxSEISelLowering.cpp	/^static bool selectMSUB(SDNode *SUBENode, SelectionDAG *CurDAG) {$/;"	f	file:
setVarArgsFrameIndex	ChinxMachineFunction.h	/^  void setVarArgsFrameIndex(int Index) { VarArgsFrameIndex = Index; }$/;"	f	class:llvm::ChinxFunctionInfo
stackAlignment	ChinxSubtarget.h	/^  unsigned stackAlignment() const { return 8; }$/;"	f	class:llvm::ChinxSubtarget
trackLivenessAfterRegAlloc	ChinxRegisterInfo.cpp	/^ChinxRegisterInfo::trackLivenessAfterRegAlloc(const MachineFunction &MF) const {$/;"	f	class:ChinxRegisterInfo
~ChinxFunctionInfo	ChinxMachineFunction.cpp	/^ChinxFunctionInfo::~ChinxFunctionInfo() {}$/;"	f	class:ChinxFunctionInfo
~ChinxTargetMachine	ChinxTargetMachine.cpp	/^ChinxTargetMachine::~ChinxTargetMachine() {}$/;"	f	class:ChinxTargetMachine
