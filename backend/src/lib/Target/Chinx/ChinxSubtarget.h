//===-- ChinxSubtarget.h - Define Subtarget for the Chinx ---------*- C++
//-*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Chinx specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_CHINX_CHINXSUBTARGET_H
#define LLVM_LIB_TARGET_CHINX_CHINXSUBTARGET_H

#include "ChinxFrameLowering.h"
#include "ChinxISelLowering.h"
#include "ChinxInstrInfo.h"

#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "ChinxGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class ChinxTargetMachine;

class ChinxSubtarget : public ChinxGenSubtargetInfo {
  virtual void anchor();

public:
  bool HasDummy;
  bool HasSet;
  bool HasAll;
  bool IsLittle;
  bool EnableOverflow{false};

  enum FeatureEnum { Chinx1, Chinx2, Chinx3, ChinxMax };

  enum ArchEnum { ChinxDefault, ChinxI, ChinxII };

  bool hasFeature_1() const { return ChinxFeatureVersion >= Chinx1; }
  bool hasFeature_2() const { return ChinxFeatureVersion >= Chinx2; }
  bool hasFeature_3() const { return ChinxFeatureVersion >= Chinx3; }
  bool hasFeature_All() const { return ChinxFeatureVersion >= ChinxMax; }

protected:
  FeatureEnum ChinxFeatureVersion;
  ArchEnum ChinxArchVersion;

  InstrItineraryData InstrItins;
  const ChinxTargetMachine &TM;
  Triple TargetTriple;
  const SelectionDAGTargetInfo TSInfo;

  std::unique_ptr<const ChinxInstrInfo> InstrInfo;
  std::unique_ptr<const ChinxFrameLowering> FrameLowering;
  std::unique_ptr<const ChinxTargetLowering> TLInfo;

public:
  bool isPositionIndependent() const;
  const ChinxABIInfo &getABI() const;

  /// This construtor initializes the data members to match that
  /// of the specified triple.
  ChinxSubtarget(const Triple &TT, const std::string &CPU,
                 const std::string &FS, bool little,
                 const ChinxTargetMachine &_TM);

  /// Vitual function, must have
  /// ParseSubtargetFeatures - Parse features string setting specified
  /// subtarget options. Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool isLittle() const { return IsLittle; }
  bool hasChinxI() const { return ChinxArchVersion >= ChinxI; }
  bool isChinxI() const { return ChinxArchVersion == ChinxI; }
  bool hasChinxII() const { return ChinxArchVersion >= ChinxII; }
  bool isChinxII() const { return ChinxArchVersion == ChinxII; }

  /// Used in ChinxInstrInfo.td, e.g. 'Predicates' expression
  /// Features related to the presence of specific instructions.
  bool enableOverflow() const { return EnableOverflow; }
  bool disableOverflow() const { return !EnableOverflow; }

  bool hasSet() const { return HasSet; }

  bool abiUsesSoftFloat() const;

  bool enableInterruptPass() const { return hasChinxII(); }

  unsigned stackAlignment() const { return 8; }

  ChinxSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
                                                  const TargetMachine &TM);

  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }

  const ChinxInstrInfo *getInstrInfo() const override {
    return InstrInfo.get();
  }

  const TargetFrameLowering *getFrameLowering() const override {
    return FrameLowering.get();
  }

  const ChinxRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo->getRegisterInfo();
  }

  const ChinxTargetLowering *getTargetLowering() const override {
    return TLInfo.get();
  }

  const InstrItineraryData *getInstrItineraryData() const override {
    return &InstrItins;
  }
};
} // namespace llvm

#endif
